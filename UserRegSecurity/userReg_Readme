**************************************************************Step # 01**************************************************************

First create simple user Get API, with all service, serviceImpl, repository, controller etc

************************************************************* Step # 02 *************************************************************

Step # 01
create the webSecurityConfiguration class

step # 02 :add annotation 

@Configuration
@EnableWebSecurity

step # 03 : override the AuthenticationProvider method

For that first, create and autowired the spring buildin "UserDetailsService"
    @Autowired
	private UserDetailsService detailsService;
    
No, inside the method createthe DaoAuthenticationProvider provider obj
set the provider obj to user detail

[Importnat : ]******* [till now we bypassed the spring generated password credential for login, so now if we use the console generated 
password to login the application than, it would't work.]


************************************************************* Step # 03 *************************************************************
Now, to redirect applicatio to teh database to read the password and role, we need to create the 
CustomUserDetailService that actually extend with the UserDetailsService.

[Importnat : ]******* [UserDetailsService spring builtin interface that helps to authenticate]

Step # 01
create CustomUserDetailService class and extend with the UserDetailService
            @Service
            public class CustomUserDetailService implements UserDetailsService {
Step #02

make this class to @Service

Step# 03
now , Implement function, that function load the user based on the username,
so first create the abstract method signature in userService interface,
taht is enogh to fetch the user based on the name, dont doanything more.

public User findByuserName(String userName);

Step# 04

Back to te CustomUserDEtailService class

@Autowired
	private UserRepository repository;
    
start work in loadUserByUsername method:

First creat the User object and assigned to the UserRepository that find teh user by name.
now, create the CustomeUserdetail POJO class and implemet the userDetail class

        public class CustomUserDetail implements UserDetails{}

and implemet all method derived by the UserDetail interface [Spring builtin interface]
As, we are only working "getPassword" and "getUsername" so make all other method true, 
otherwise spring wouldn't login the user

Now add contructor to this POJO, autowired the user entity
change te these above to method and follow class

Final Step 
create database and table user into the databse,
insert the data based on the admin record and add the encrypted password
e.g encrypted password of 123 , take encryption of 123 online website "https://bcrypt-generator.com/"
 and run the application, at the login page add the credential e.g sam and password 123, not the save into the database.


























